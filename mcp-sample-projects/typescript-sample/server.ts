import {
  McpServer,
  ResourceTemplate,
} from "@modelcontextprotocol/sdk/server/mcp";
import { StreamableHTTPServerTransport } from "@modelcontextprotocol/sdk/server/streamableHttp";
import express from "express";
import { z } from "zod";

// Create an MCP server
const server = new McpServer({
  name: "test-server",
  version: "1.0.0",
});

// Add a calculator tool - simple addition
server.registerTool(
  "add",
  {
    title: "Addition Tool",
    description: "Add two numbers together",
    inputSchema: { a: z.number(), b: z.number() },
    outputSchema: { result: z.number() },
  },
  async ({ a, b }) => {
    const output = { result: a + b };
    console.log(`TypeScript MCP: Adding ${a} + ${b} = ${output.result}`);
    return {
      content: [{ type: "text", text: JSON.stringify(output) }],
      structuredContent: output,
    };
  }
);

// Add a multiplication tool
server.registerTool(
  "multiply",
  {
    title: "Multiplication Tool",
    description: "Multiply two numbers together",
    inputSchema: { a: z.number(), b: z.number() },
    outputSchema: { result: z.number() },
  },
  async ({ a, b }) => {
    const output = { result: a * b };
    console.log(`TypeScript MCP: Multiplying ${a} * ${b} = ${output.result}`);
    return {
      content: [{ type: "text", text: JSON.stringify(output) }],
      structuredContent: output,
    };
  }
);

// Add an echo tool
server.registerTool(
  "echo",
  {
    title: "Echo Tool",
    description: "Echo back the provided message",
    inputSchema: { message: z.string() },
    outputSchema: { echo: z.string() },
  },
  async ({ message }) => {
    const output = { echo: `TypeScript Echo: ${message}` };
    console.log(`TypeScript MCP: Echoing "${message}"`);
    return {
      content: [{ type: "text", text: JSON.stringify(output) }],
      structuredContent: output,
    };
  }
);

// Add a dynamic greeting resource
server.registerResource(
  "greeting",
  new ResourceTemplate("greeting://{name}", { list: undefined }),
  {
    title: "Greeting Resource",
    description: "Dynamic greeting generator",
  },
  async (uri, { name }) => ({
    contents: [
      {
        uri: uri.href,
        text: `Hello, ${name}! (from TypeScript MCP Server)`,
      },
    ],
  })
);

// Add a test prompt
server.registerPrompt(
  "test-prompt",
  {
    title: "Test Prompt",
    description: "A simple test prompt for verification",
    argsSchema: { topic: z.string() },
  },
  ({ topic }) => ({
    messages: [
      {
        role: "user",
        content: {
          type: "text",
          text: `Please discuss the topic: ${topic} (Generated by TypeScript MCP)`,
        },
      },
    ],
  })
);

// Set up Express and HTTP transport
const app = express();
app.use(express.json());

app.post("/mcp", async (req, res) => {
  try {
    // Create a new transport for each request to prevent request ID collisions
    const transport = new StreamableHTTPServerTransport({
      sessionIdGenerator: undefined,
      enableJsonResponse: true,
    });

    res.on("close", () => {
      transport.close();
    });

    await server.connect(transport);
    await transport.handleRequest(req, res, req.body);
  } catch (error) {
    console.error("Error handling MCP request:", error);
    if (!res.headersSent) {
      res.status(500).json({
        jsonrpc: "2.0",
        error: {
          code: -32603,
          message: "Internal server error",
        },
        id: null,
      });
    }
  }
});

const port = parseInt(process.env.PORT || "3001");
app
  .listen(port, () => {
    console.log(
      `TypeScript MCP Server running on http://localhost:${port}/mcp`
    );
    console.log("Available tools: add, multiply, echo");
    console.log("Available resources: greeting://{name}");
    console.log("Available prompts: test-prompt");
  })
  .on("error", (error) => {
    console.error("Server error:", error);
    process.exit(1);
  });
